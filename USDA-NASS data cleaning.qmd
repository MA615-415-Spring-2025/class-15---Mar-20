---
title: "Stawberries"
author: MA415
date: 2025 feb 27
format: 
  html:
    embed-resources: true
editor: visual
---

## code for cleaning and organization

## Example: Strawberries

The data

The data set for this assignment has been selected from:

strawberries 2025feb24

USDA NASS

{r} #\| label: load libraries #\| warning: false #\| message: false

library(knitr)\
library(kableExtra) library(tidyverse) library(stringr)

Read the file

```{r}
#| label: read data - glimpse 

strawberry <- read_csv("straw1.csv", col_names = TRUE)
```

### last class

Examine the data. How is it organized?

for(i in 1:dim(strawberry)\[2\]){ a = unique(strawberry\[,i\]) }

############################ 

Examine the data. How is it organized?

```{r}

## is every line associated with a state?

state_all <- strawberry |> distinct(State)

state_all1 <- strawberry |> group_by(State) |> count()

## every row is associated with a state

sum(state_all1$n) == dim(strawberry)[1]


## to get an idea of the data -- looking at california only

calif_census <- strawberry |> filter((State=="CALIFORNIA") & (Program=="CENSUS"))

calif_census <- calif_census |> select(Year, `Data Item`, Value)

### 

calif_survey <- strawberry |> filter((State=="CALIFORNIA") & (Program=="SURVEY"))

calif_survey <- strawberry |> select(Year, Period, `Data Item`, Value)



```

## remove columns with a single value in all rows

```{r}
#|label: drop 1-item columns

drop_one_value_col <- function(df){
  browser()
drop <- NULL
for(i in 1:dim(df)[2]){
if((df |> distinct(df[,i]) |> count()) == 1){
drop = c(drop, i)
} }

if(is.null(drop)){return("none")}else{

   print("Columns dropped:")
   print(colnames(df)[drop])
   strawberry <- df[, -1*drop]
   }
}


## use the function

strawberry <- drop_one_value_col(strawberry)

drop_one_value_col(strawberry)

```

## separate composite columns

### `Data Item` into (fruit, category, item)

```{r}
#|label: split Data Item

  strawberry <- strawberry |>
  separate_wider_delim(  cols = `Data Item`,
                         delim = ",",
                         names = c("Fruit",
                                 "Category",
                                 "Item",
                                 "Metric"),
                         too_many = "error",
                         too_few = "align_start"
                       )

## Use too_many and too_few to set up the separation operation.

```

There is a problem you have to fix -- a leading space.

```{r}
#|label: fix the leading space

 # note
strawberry$Category[1]
# strawberry$Item[2]
# strawberry$Metric[6]
# strawberry$Domain[1]
## 
## trim white space 

strawberry$Category <- str_trim(strawberry$Category, side = "both")
strawberry$Item <- str_trim(strawberry$Item, side = "both")
strawberry$Metric <- str_trim(strawberry$Metric, side = "both")

```

## now exam the Fruit column -- find hidden sub-columns

```{r}

unique(strawberry$Fruit)

## generate a list of rows with the production and price information

spr <- which((strawberry$Fruit=="STRAWBERRIES - APPLICATIONS"))


strw_apps <- strawberry |> slice(spr)


######################################


## this has the census data, too

# strw_chem <- strawberry |> slice(-1*spr)  ## too soon


  
```

## now examine the rest of the columns

Which ones need to be split?

## split sales and chemicals into two dataframes

(do this last after separating rows into separate data frames) (THEN rename the columns to correspond the analysis being done with the data frames)

```{r}
#|label: split srawberry into census and survey pieces

strw_b_sales <- strawberry |> filter(Program == "CENSUS")

strw_b_chem <- strawberry |> filter(Program == "SURVEY")

nrow(strawberry) == (nrow(strw_b_chem) + nrow(strw_b_sales))

## Move marketing-related rows in strw_b_chem 
## to strw_b_sales




```

## plots

```{r}
#|label: plot 1

plot1_data <- strawberry |> 
  select(c(Year, State, Category, Value)) |> 
  filter((Year == 2021) & (Category == "ORGANIC - OPERATIONS WITH SALES"))

plot1_data$Value <- as.numeric(plot1_data$Value)

plot1_data <- plot1_data |> arrange(desc(Value))

ggplot(plot1_data, aes(x=reorder(State, -Value), y=Value)) + 
  geom_bar(stat = "identity") + 
  theme(axis.text.x=element_text(angle=45,hjust=1)) +
  labs(x = "States", y = "Count",
title ="Number of Organic Strawberry operations with Sales in 2021")


```

```{r}
## plot 2

plot2_data <- strawberry |> 
  select(c(Year, State, Category, Item, Value)) |> 
  filter((Year == 2021) & 
           (Category == "ORGANIC - SALES") & 
           (Item == "MEASURED IN $") & 
           (Value != "(D)"))


plot2_data$Value <- as.numeric(gsub(",", "", plot2_data$Value))

plot2_data <- plot1_data |> arrange(desc(Value))

ggplot(plot2_data, aes(x=reorder(State, -Value), y=Value)) + 
  geom_bar(stat = "identity") + 
  theme(axis.text.x=element_text(angle=45,hjust=1)) +
  labs(x = "States", y = "Sales",
title ="Organic Strawberry Sales ($) in 2021")


```

## chemicals

### carcinogens from WHO list

Six specific pesticides - captafol, ethylene dibromide, glyphosate, malathion, diazinon and dichlorophenyltrichloroethane (DDT)

```{r}

cc <- strawberry |> distinct(Category)

cca <- strawberry |> 
       distinct(Domain)

## Split domain into two columns "type" and "subtype"
  strawberry <- strawberry |>
  separate_wider_delim(  cols = Domain,
                         delim = ",",
                         names = c("type",
                                 "subtype"),
                         too_many = "error",
                         too_few = "align_start"
                       )
         
## check the result
    
  ctype <- strawberry |> distinct(type)

  
  csubtype <- strawberry |> distinct(subtype)
  
## 
  
  
  
##  
  
  yr <- strawberry |> distinct(Year)
  

```

```{r}
## columns need descriptive names

doc_cat <- strawberry |> distinct(`Domain Category`)

strawberry <- strawberry |>
  separate_wider_delim(  cols = `Domain Category`,
                         delim = ",",
                         names = c("type1",
                                 "detail1",
                                 "detail2",
                                 "datail3"),
                         too_many = "error",
                         too_few = "align_start"
                       )

```

```{r}
## columns need descriptive names

strawberry <- strawberry |>
  separate_wider_delim(  cols = type1,
                         delim = ":",
                         names = c("type1a",
                                 "type1b"),
                         too_many = "error",
                         too_few = "align_start"
                       )


```

for EPA number lookup [epa numbers](https://archive.epa.gov/pesticides/chemicalsearch/chemical/foia/web/html/128810.html)

[Active Pesticide Product Registration Informational Listing](https://ordspub.epa.gov/ords/pesticides/f?p=APPRIL_PUBLIC:2::::::)

[CAS for Methyl Bromide](https://ordspub.epa.gov/ords/pesticides/f?p=113:17::::::)

[pesticide chemical search](https://ordspub.epa.gov/ords/pesticides/f?p=chemicalsearch:1)

[toxic chemical dashboard](https://comptox.epa.gov/dashboard/)

[pubChem](https://pubchem.ncbi.nlm.nih.gov/)

The EPA PC (Pesticide Chemical) Code is a unique chemical code number assigned by the EPA to a particular pesticide active ingredient, inert ingredient or mixture of active ingredients.

```{r}

# dat1 <- strawberry |> filter(type=="CHEMICAL")
# 
# dat2 <- strawberry |> filter(strawberry$type!=strawberry$type1a)
# 
#  
# data_f21 <- strawberry |> 
#   filter((subtype == " FUNGICIDE") & (State == "CALIFORNIA") & (Year == "2021")  )
# 
# data_f20 <- strawberry |> 
#   filter((subtype == " FUNGICIDE") & (State == "CALIFORNIA") & (Year == "2020")  )
# 
# data_f19 <- strawberry |> 
#   filter((subtype == " FUNGICIDE") & (State == "CALIFORNIA") & (Year == "2019")  )
# 
# data_f18 <- strawberry |> 
#   filter((subtype == " FUNGICIDE") & (State == "CALIFORNIA") & (Year == "2018")  )
# 
# data_f17 <- strawberry |> 
#   filter((subtype == " FUNGICIDE") & (State == "CALIFORNIA") & (Year == "2017")  )
# 



```

```{r}
## columns need descriptive names

strawberry <- strawberry |>
  separate_wider_delim(  cols = detail1,
                         delim = ":",
                         names = c("detail1a",
                                 "detail1b"),
                         too_many = "error",
                         too_few = "align_start"
                       )



strawberry$detail1b <- strawberry$detail1b |> 
  str_trim(side = "both") |> 
     str_sub(start = 2, end = -2)


aa <- strawberry$detail1b

aa <- na.omit(aa)


group1 <- c("captafol", "ethylene dibromide", 
            "glyphosate","malathion", "diazinon", 
            "dichlorophenyltrichloroethane", "DDT")


```

Investigating toxic pesticides

[start here with chem PC code](https://ordspub.epa.gov/ords/pesticides/f?p=chemicalsearch:1)

[step 2](https://ordspub.epa.gov/ords/pesticides/f?p=113:1::::RP,17,1::) to get label (with warnings) for products using the chemical

[Pesticide Product and Label System](https://ordspub.epa.gov/ords/pesticides/f?p=113:1::::RP,17,1::)

[Search by Chemical](https://ordspub.epa.gov/ords/pesticides/f?p=113:17::::::)

[CompTox Chemicals Dashboard](https://comptox.epa.gov/dashboard/)

[Active Pesticide Product Registration Informational Listing](https://ordspub.epa.gov/ords/pesticides/f?p=APPRIL_PUBLIC:2::::::)

[OSHA chemical database](https://www.osha.gov/chemicaldata)

[Pesticide Ingredients](http://npic.orst.edu/ingred/)

[NPIC Product Research Online (NPRO)](http://npic.orst.edu/NPRO/)

[Databases for Chemical Information](http://npic.orst.edu/ingred/cheminfo.html)

[Pesticide Active Ingredients](http://npic.orst.edu/ingred/active.html)

[TSCA Chemical Substance Inventory](https://www.epa.gov/tsca-inventory)

[glyphosate](https://ordspub.epa.gov/ords/pesticides/f?p=CHEMICALSEARCH:3::::1,3,31,7,12,25:P3_XCHEMICAL_ID:2478)
